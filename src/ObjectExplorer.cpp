#include <sstream>

#include <windows.h>

#include "utility/String.hpp"

#include "REFramework.hpp"
#include "ObjectExplorer.hpp"

ObjectExplorer::ObjectExplorer()
{
    m_objectAddress.reserve(256);
}

void ObjectExplorer::onDrawUI() {
    ImGui::SetNextTreeNodeOpen(false, ImGuiCond_::ImGuiCond_Once);

    if (!ImGui::CollapsingHeader(getName().data())) {
        return;
    }

    auto curtime = std::chrono::system_clock::now();

    // List of globals to choose from
    if (ImGui::CollapsingHeader("Singletons")) {
        if (curtime > m_nextRefresh) {
            g_framework->getGlobals()->safeRefresh();
            m_nextRefresh = curtime + std::chrono::seconds(1);
        }

        // make a copy, we want to sort by name
        auto singletons = g_framework->getGlobals()->getObjects();

        // first loop, sort
        std::sort(singletons.begin(), singletons.end(), [](REManagedObject** a, REManagedObject** b) {
            auto aType = utility::REManagedObject::safeGetType(*a);
            auto bType = utility::REManagedObject::safeGetType(*b);

            if (aType == nullptr || aType->name == nullptr) {
                return true;
            }

            if (bType == nullptr || bType->name == nullptr) {
                return false;
            }

            return std::string_view{ aType->name } < std::string_view{ bType->name };
        });

        // Display the nodes
        for (auto obj : singletons) {
            auto t = utility::REManagedObject::safeGetType(*obj);

            if (t == nullptr || t->name == nullptr) {
                continue;
            }

            ImGui::SetNextTreeNodeOpen(false, ImGuiCond_::ImGuiCond_Once);

            if (ImGui::TreeNode(t->name)) {
                handleAddress(*obj);
                ImGui::TreePop();
            }

            contextMenu(*obj);
        }
    }

    ImGui::InputText("REObject Address", m_objectAddress.data(), 16, ImGuiInputTextFlags_::ImGuiInputTextFlags_CharsHexadecimal);

    if (m_objectAddress[0] != 0) {
        handleAddress(std::stoull(m_objectAddress, nullptr, 16));
    }
}

void ObjectExplorer::handleAddress(Address address, int32_t offset) {
    if (!isManagedObject(address)) {
        return;
    }

    auto object = address.as<REManagedObject*>();

    bool madeNode = false;
    auto isGameObject = utility::REManagedObject::isA(object, "via.GameObject");

    if (offset != -1) {
        ImGui::SetNextTreeNodeOpen(false, ImGuiCond_::ImGuiCond_Once);

        if (isGameObject) {
            madeNode = ImGui::TreeNode((uint8_t*)object + offset, "0x%X: %s", offset, utility::REString::getString(address.as<REGameObject*>()->name).c_str());
        }
        else {
            madeNode = ImGui::TreeNode((uint8_t*)object + offset, "0x%X: %s", offset, object->info->classInfo->type->name);
        }

        contextMenu(object);
    }

    if (madeNode || offset == -1) {
        if (isGameObject) {
            handleGameObject(address.as<REGameObject*>());
        }

        if (utility::REManagedObject::isA(object, "via.Component")) {
            handleComponent(address.as<REComponent*>());
        }

        handleType(object, utility::REManagedObject::getType(object));

        if (ImGui::TreeNode(object, "AutoGenerated Types")) {
            auto typeInfo = object->info->classInfo->type;
            auto size = utility::REManagedObject::getSize(object);

            for (auto i = (uint32_t)sizeof(void*); i < size; i += sizeof(void*)) {
                auto ptr = Address(object).get(i).to<REManagedObject*>();

                handleAddress(ptr, i);
            }

            ImGui::TreePop();
        }
    }

    if (madeNode && offset != -1) {
        ImGui::TreePop();
    }
}

void ObjectExplorer::handleGameObject(REGameObject* gameObject) {
    ImGui::Text("Name: %s", utility::REString::getString(gameObject->name).c_str());
    makeTreeOffset(gameObject, offsetof(REGameObject, transform), "Transform");
    makeTreeOffset(gameObject, offsetof(REGameObject, folder), "Folder");
}

void ObjectExplorer::handleComponent(REComponent* component) {
    makeTreeOffset(component, offsetof(REComponent, ownerGameObject), "Owner");
    makeTreeOffset(component, offsetof(REComponent, childComponent), "ChildComponent");
    makeTreeOffset(component, offsetof(REComponent, prevComponent), "PrevComponent");
    makeTreeOffset(component, offsetof(REComponent, nextComponent), "NextComponent");
}

void ObjectExplorer::handleTransform(RETransform* transform) {

}

void ObjectExplorer::handleType(REManagedObject* obj, REType* t) {
    if (obj == nullptr || t == nullptr) {
        return;
    }

    auto count = 0;

    for (auto typeInfo = t; typeInfo != nullptr; typeInfo = typeInfo->super) {
        auto name = typeInfo->name;

        if (name == nullptr) {
            continue;
        }

        if (!ImGui::TreeNode(name)) {
            break;
        }

        ImGui::Text("Size: 0x%X", utility::REManagedObject::getSize(obj));

        ++count;

        if (typeInfo->fields != nullptr && typeInfo->fields->variables != nullptr && typeInfo->fields->variables->data != nullptr) {
            auto descriptors = typeInfo->fields->variables->data->descriptors;

            if (ImGui::TreeNode(typeInfo->fields, "Fields: %i", typeInfo->fields->variables->num)) {
                for (auto i = descriptors; i != descriptors + typeInfo->fields->variables->num; ++i) {
                    auto variable = *i;

                    if (variable == nullptr) {
                        continue;
                    }

                    auto madeNode = ImGui::TreeNode(variable, "%s %s", variable->typeName, variable->name);
                    contextMenu(variable->function);

                    // Info about the field
                    if (madeNode) {
                        attemptDisplayField(obj, variable);

                        if (ImGui::TreeNode(variable, "Additional Information")) {
                            ImGui::Text("Address: 0x%p", variable);
                            ImGui::Text("Function: 0x%p", variable->function);

                            if (variable->typeName != nullptr) {
                                ImGui::Text("Type: %s", variable->typeName);
                            }

                            ImGui::Text("VarType: %i", variable->variableType);

                            if (variable->staticVariableData != nullptr) {
                                ImGui::Text("GlobalIndex: %i", variable->staticVariableData->variableIndex);
                            }
                        }

                        ImGui::TreePop();
                    }
                }

                ImGui::TreePop();
            }
        }
    }

    for (auto i = 0; i < count; ++i) {
        ImGui::TreePop();
    }
}

void ObjectExplorer::attemptDisplayField(REManagedObject* obj, VariableDescriptor* desc) {
    if (desc->function == nullptr) {
        return;
    }

    auto ret = std::string{ desc->typeName };
    auto func = (void* (*)(VariableDescriptor*, REManagedObject*, void*))desc->function;

    auto makeTreeAddr = [this](void* addr) {
        auto madeNode = ImGui::TreeNode(addr, "Variable: 0x%p", addr);
        contextMenu(addr);

        if (madeNode) {
            if (isManagedObject(addr)) {
                handleAddress(addr);
            }

            ImGui::TreePop();
        }
    };

    char data[0x100]{ 0 };

    // 0x10 == pointer, i think?
    if (((desc->flags & 0x1F) - 1 != 0x10) || desc->staticVariableData == nullptr) {
        func(desc, obj, &data);

        // not the most efficient way but whatever.
        if (ret == "s32") {
            ImGui::Text("%i", *(int16_t*)&data);
        }
        else if (ret == "u32") {
            ImGui::Text("%i", *(int32_t*)&data);
        }
        else if (ret == "f32") {
            ImGui::Text("%f", *(float*)&data);
        }
        else if (ret == "bool") {
            ImGui::Text("%i", (int)*(bool*)&data);
        }
        else if (ret == "c16" && *(wchar_t**)&data != nullptr) {
            ImGui::Text("%s", utility::narrow(*(wchar_t**)&data).c_str());
        }
        else if (ret == "c8" && *(char**)&data != nullptr) {
            ImGui::Text("%s", *(char**)&data);
        }
        else if (ret == "via.vec3") {
            auto& vec = *(Vector3f*)&data;
            ImGui::Text("%f %f %f", vec.x, vec.y, vec.z);
        }
        else if (ret == "via.Quaternion") {
            auto& quat = *(glm::quat*)&data;
            ImGui::Text("%f %f %f %f", quat.x, quat.y, quat.z, quat.w);
        }
        else if (ret == "via.string") {
            ImGui::Text("%s", utility::REString::getString(*(REString*)&data).c_str());
        }
        // Enum or something.
        else if ((desc->flags & 0x1F) == 1) {
            ImGui::Text("%i", *(int32_t*)&data);
        }
        else {
            makeTreeAddr(*(void**)&data);
        }
    }
    // Pointer... usually
    else {
        func(desc, obj, &data);
        makeTreeAddr(*(void**)&data);
    }
}

void ObjectExplorer::contextMenu(void* address) {
    if (ImGui::BeginPopupContextItem()) {
        if (ImGui::Selectable("Copy")) {
            std::stringstream ss;
            ss << std::hex << (uintptr_t)address;

            ImGui::SetClipboardText(ss.str().c_str());
        }
        
        // Log component hierarchy to disk
        if (isManagedObject(address) && utility::REManagedObject::isA((REManagedObject*)address, "via.Component") && ImGui::Selectable("Log Hierarchy")) {
            auto comp = (REComponent*)address;

            for (auto obj = comp; obj; obj = obj->childComponent) {
                auto t = utility::REManagedObject::safeGetType(obj);

                if (t != nullptr) {
                    if (obj->ownerGameObject == nullptr) {
                        spdlog::info("{:s} ({:x})", t->name, (uintptr_t)obj);
                    }
                    else {
                        auto owner = obj->ownerGameObject;
                        spdlog::info("[{:s}] {:s} ({:x})", utility::REString::getString(owner->name), t->name, (uintptr_t)obj);
                    }
                }

                if (obj->childComponent == comp) {
                    break;
                }
            }
        }

        ImGui::EndPopup();
    }
}

void ObjectExplorer::makeTreeOffset(REManagedObject* object, uint32_t offset, std::string_view name) {
    auto ptr = Address(object).get(offset).to<void*>();

    if (ptr == nullptr) {
        return;
    }

    auto madeNode = ImGui::TreeNode((uint8_t*)object + offset, "0x%X: %s", offset, name.data());

    contextMenu(ptr);

    if (madeNode) {
        handleAddress(ptr);
        ImGui::TreePop();
    }
}

bool ObjectExplorer::isManagedObject(Address address) const {
    return utility::REManagedObject::isManagedObject(address);
}
